using UnityEngine;
using System.Collections;
using System;
using System.IO;
using Scripts.API;
using Scripts.Initialize;
using Scripts.ScriptableObject;
using UnityEngine.Networking;

public class APIManager : AutoGeneratedSingletonMonoBehaviour<APIManager>
{
    [SerializeField] private APIEntry apiEntry;
    private byte[] PreprocessImage(string imagePath)
    {
        Texture2D texture = LoadImageFromFile(imagePath);
        if (texture != null)
        {
            Texture2D resizedTexture = ResizeTexture(texture, 64, 64);
            return resizedTexture.EncodeToJPG();
        }
        return null;
    }
    private Texture2D LoadImageFromFile(string imagePath)
    {
        byte[] fileData = File.ReadAllBytes(imagePath);
        Texture2D texture = new Texture2D(2, 2);
        texture.LoadImage(fileData); // Load hình ảnh từ byte[]
        return texture;
    }
    private Texture2D ResizeTexture(Texture2D texture, int width, int height)
    {
        RenderTexture rt = RenderTexture.GetTemporary(width, height);
        RenderTexture.active = rt;
        Graphics.Blit(texture, rt);
        Texture2D resizedTexture = new Texture2D(width, height);
        resizedTexture.ReadPixels(new Rect(0, 0, width, height), 0, 0);
        resizedTexture.Apply();
        RenderTexture.active = null;
        return resizedTexture;
    }
    public IEnumerator CallAPI(string imagePath, Action<string> callback)
    {
        byte[] imageBytes = PreprocessImage(imagePath);
        if (imageBytes == null)
        {
            Debug.LogError("Error: Cannot preprocess image.");
            yield break;
        }
        
        WWWForm form = new WWWForm();
        form.AddBinaryData("file", imageBytes);
        
        using (UnityWebRequest www = UnityWebRequest.Post(apiEntry.GetApiUrl(APIEnum.PREDIC_SIGN_LANGUAGE), form))
        {
            yield return www.SendWebRequest();

            if (www.result != UnityWebRequest.Result.Success)
            {
                Debug.LogError("Error: " + www.error);
                callback?.Invoke(null);
            }
            else
            {
                string jsonResponse = www.downloadHandler.text;
                callback?.Invoke(jsonResponse);
            }
        }
    }
}
